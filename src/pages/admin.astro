---
import MainLayout from '../layouts/MainLayout.astro';
import { type Product } from '../types';

let products: Product[] = [];
try {
  const response = await fetch(`${Astro.url.origin}/api/products/get`);
  if (response.ok) { products = await response.json() as Product[]; }
} catch (error) { console.error("Fetch failed for admin page:", error); }
---
<MainLayout title="Admin Panel - Storeka">
  <div class="admin-panel">
    <h1>Admin Panel</h1>
    <section class="admin-section">
      <h2>Add New Product</h2>
      <form id="add-product-form" class="product-form">
        <label>Title <input type="text" name="title" required /></label>
        <label>Description <textarea name="description" rows="4" required></textarea></label>
        <div class="form-row">
          <label>Category
            <select name="category" required>
              <option value="Phones">Phones</option> <option value="Laptops">Laptops</option>
              <option value="Watches">Watches</option> <option value="Accessories">Accessories</option>
            </select>
          </label>
          <label>Price <input type="number" name="price" step="0.01" required /></label>
        </div>
        
        <!-- !!! UPDATED: File inputs for images !!! -->
        <label>Main Image <input type="file" id="main-image-upload" accept="image/*" required /></label>
        <div class="upload-status" id="main-image-status"></div>
        
        <!-- Hidden inputs to store the final image URLs -->
        <input type="hidden" name="image" id="main-image-url" />
        <input type="hidden" name="images" id="gallery-images-url" />

        <button type="submit" id="submit-btn">Add Product</button>
        <div id="form-status"></div>
      </form>
    </section>

    <section class="admin-section">
      <h2>Manage Existing Products</h2>
      <ul class="product-list" id="product-list">{/* ... list rendering ... */}</ul>
    </section>
  </div>
</MainLayout>

<script>
  const addForm = document.getElementById('add-product-form');
  const mainImageUpload = document.getElementById('main-image-upload');
  const mainImageStatus = document.getElementById('main-image-status');
  const mainImageUrlInput = document.getElementById('main-image-url');
  const galleryImagesUrlInput = document.getElementById('gallery-images-url');
  const submitBtn = document.getElementById('submit-btn');
  const formStatus = document.getElementById('form-status');

  // Helper function to upload a single file
  async function uploadFile(file) {
    const response = await fetch('/api/products/upload', {
      method: 'POST',
      body: file,
      headers: { 'Content-Type': file.type }
    });
    if (!response.ok) {
      throw new Error('Upload failed.');
    }
    const result = await response.json();
    return result.url;
  }

  // Handle the form submission
  addForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    submitBtn.disabled = true;
    formStatus.textContent = 'Uploading image...';

    const mainImageFile = mainImageUpload.files[0];
    if (!mainImageFile) {
      alert('Please select a main image.');
      submitBtn.disabled = false;
      return;
    }

    try {
      // 1. Upload the main image
      const uploadedImageUrl = await uploadFile(mainImageFile);
      mainImageUrlInput.value = uploadedImageUrl;
      // For now, we'll set the gallery to just the main image
      galleryImagesUrlInput.value = JSON.stringify([uploadedImageUrl]);
      formStatus.textContent = 'Image uploaded! Submitting product...';

      // 2. Submit the rest of the product data with the new URL
      const formData = new FormData(addForm);
      const productData = {
        title: formData.get('title'),
        description: formData.get('description'),
        category: formData.get('category'),
        price: parseFloat(formData.get('price') as string),
        image: formData.get('image'), // This now gets the URL from the hidden input
        images: JSON.parse(formData.get('images') as string)
      };

      const productResponse = await fetch('/api/products/add', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(productData),
      });

      if (productResponse.ok) {
        alert('Product added successfully!');
        window.location.reload();
      } else {
        throw new Error('Failed to add product data.');
      }

    } catch (error) {
      alert(`An error occurred: ${error.message}`);
      formStatus.textContent = '';
      submitBtn.disabled = false;
    }
  });
  
  // (The delete logic remains the same)
</script>
<style>
  /* Styles are mostly unchanged, just added a status style */
  .upload-status, #form-status { font-size: 0.9rem; color: var(--hint-color); min-height: 1.2em; }
  /* ... all other styles from before ... */
</style>