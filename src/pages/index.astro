---
import MainLayout from '../layouts/MainLayout.astro';
import type { Database } from '../lib/database.types';

type Product = Database['public']['Tables']['products']['Row'];

let products: Product[] = [];
try {
  const response = await fetch(`${Astro.url.origin}/api/products/get`);
  if (!response.ok) {
    console.error(`Error fetching products for homepage: ${response.statusText}`);
  } else {
    products = await response.json();
  }
} catch (error) {
  console.error("Fetch failed for homepage:", error);
}

const categories = ['All', ...new Set(products.map(p => p.category))];
---
<MainLayout title="Storeka - Modern Product Catalog">
  <div class="filters">
    <input type="search" id="search-bar" placeholder="Search for products..." />
    <div class="category-filters" id="category-filters">
      {categories.map((cat, i) => <button class:list={["filter-btn", { active: i === 0 }]} data-category={cat}>{cat}</button>)}
    </div>
  </div>
  <div id="product-grid">
    {products.map(product => (
      <a href={`/products/${product.id}/`} class="product-card" data-name={product.title.toLowerCase()} data-category={product.category}>
        <div class="card-image-container"><img src={product.image} alt={product.title} loading="lazy" /></div>
        <div class="card-content">
          <span class="card-category">{product.category}</span>
          <h3 class="card-title">{product.title}</h3>
          <div class="card-footer">
            <p class="card-price">${product.price.toFixed(2)}</p>
            <span class="card-button">View</span>
          </div>
        </div>
      </a>
    ))}
  </div>
</MainLayout>

<script>
  const searchBar=document.getElementById("search-bar") as HTMLInputElement;const categoryContainer=document.getElementById("category-filters");const productCards=document.querySelectorAll(".product-card") as NodeListOf<HTMLElement>;let activeCategory="All";function filterProducts(){const searchTerm=searchBar.value.toLowerCase().trim();productCards.forEach(card=>{const isCategoryMatch=activeCategory==="All"||card.dataset.category===activeCategory;const isSearchMatch=card.dataset.name?.toLowerCase().includes(searchTerm);card.style.display=isCategoryMatch&&isSearchMatch?"flex":"none"})}categoryContainer?.addEventListener("click",e=>{const target=e.target as HTMLElement;if(target.matches(".filter-btn")){categoryContainer.querySelector(".active")?.classList.remove("active");target.classList.add("active");activeCategory=target.dataset.category||"All";filterProducts()}});searchBar.addEventListener("input",filterProducts);
</script>

<style>
  .filters{margin-bottom:2rem;display:flex;flex-direction:column;gap:1rem}
  #search-bar{width:100%;padding:.8rem 1.25rem;font-size:1rem;border-radius:12px;border:1px solid var(--border-color);background-color:var(--secondary-bg-color);color:var(--text-color)}
  .category-filters{display:flex;flex-wrap:wrap;gap:.75rem}
  .filter-btn{padding:.5rem 1rem;font-size:.9rem;font-weight:500;border:none;border-radius:8px;background-color:var(--secondary-bg-color);color:var(--text-color);cursor:pointer;transition:.2s}
  .filter-btn.active{background-color:var(--button-color);color:var(--button-text-color)}
  
  #product-grid {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(2, 1fr); /* Start with 2 columns on mobile for more space */
  }
  @media(max-width: 360px) {
    #product-grid { grid-template-columns: 1fr; } /* 1 column for very small screens */
  }
  @media(min-width: 640px){#product-grid{grid-template-columns:repeat(3,1fr);}}
  @media(min-width:1024px){#product-grid{grid-template-columns:repeat(5,1fr);gap: 1.5rem;}}
  
  .product-card {
    background-color: var(--secondary-bg-color);
    border-radius: 16px;
    overflow: hidden;
    text-decoration: none;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    border: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
  }

  .product-card:hover { transform: translateY(-5px); box-shadow: 0 10px 20px rgba(0,0,0,0.07); }
  .dark .product-card:hover { box-shadow: 0 0 25px color-mix(in srgb, var(--link-color) 15%, transparent); }
  
  .card-image-container { width: 100%; height: 140px; flex-shrink: 0; }
  .product-card img { width: 100%; height: 100%; object-fit: cover; }
  
  .card-content { padding: 0.75rem; display: flex; flex-direction: column; flex-grow: 1; }
  .card-category { font-size:.7rem; font-weight:600; color:var(--hint-color); text-transform:uppercase; }
  
  .card-title {
    font-size: 0.9rem; font-weight: 600; color:var(--text-color);
    margin: 0.25rem 0 0.5rem; line-height: 1.3; flex-grow: 1; 
  }

  .card-footer {
    display:flex;
    justify-content:space-between;
    align-items:center;
    margin-top: auto;
    flex-wrap: wrap; /* Allows items to wrap to a new line on small cards */
    gap: 0.5rem; /* Adds space between items when they wrap */
  }
  .card-price{font-size:1rem;font-weight:700;color:var(--link-color)}
  .card-button{font-size:.8rem;font-weight:600;padding:.4rem .8rem;border:none;border-radius:8px;background-color:var(--button-color);color:var(--button-text-color)}
</style>