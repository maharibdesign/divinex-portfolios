---
import MainLayout from '../layouts/MainLayout.astro';
import { type Product } from '../types';

let products: Product[] = [];
try {
  const response = await fetch(`${Astro.url.origin}/api/products/get`);
  if (response.ok) {
    products = await response.json() as Product[];
  }
} catch (error) {
  console.error("Fetch failed for homepage:", error);
}

const categories = ['All', ...new Set(products.map(p => p.category || ''))].filter(Boolean);
---
<MainLayout title="Storeka - Modern Product Catalog">
  <div class="filters">
    <input type="search" id="search-bar" placeholder="Search for products..." />
    <div class="category-filters" id="category-filters">
      {categories.map((cat, i) => <button class:list={["filter-btn", { active: i === 0 }]} data-category={cat}>{cat}</button>)}
    </div>
  </div>
  <div id="product-grid">
    {products.map(product => (
      <a 
        href={`/products/${product.id}/`} 
        class="product-card" 
        data-name={(product.title || '').toLowerCase()} 
        data-category={product.category || 'Uncategorized'}
      >
        <div class="card-image-container">
          <img src={product.image || '/favicon.png'} alt={product.title || 'Product Image'} loading="lazy" />
        </div>
        <div class="card-content">
          <span class="card-category">{product.category || 'Uncategorized'}</span>
          <h3 class="card-title">{product.title || 'Untitled Product'}</h3>
          <!-- !!! NEW: The description is added here !!! -->
          <p class="card-description">{product.description || 'No description available.'}</p>
          <div class="card-footer">
            <p class="card-price">${(product.price || 0).toFixed(2)}</p>
            <span class="card-button">View</span>
          </div>
        </div>
      </a>
    ))}
  </div>
</MainLayout>

<script>
  // Script is unchanged
  const searchBar=document.getElementById("search-bar") as HTMLInputElement;const categoryContainer=document.getElementById("category-filters");const productCards=document.querySelectorAll(".product-card") as NodeListOf<HTMLElement>;let activeCategory="All";function filterProducts(){const searchTerm=searchBar.value.toLowerCase().trim();productCards.forEach(card=>{const isCategoryMatch=activeCategory==="All"||card.dataset.category===activeCategory;const isSearchMatch=card.dataset.name?.toLowerCase().includes(searchTerm);card.style.display=isCategoryMatch&&isSearchMatch?"flex":"none"})}categoryContainer?.addEventListener("click",e=>{const target=e.target as HTMLElement;if(target.matches(".filter-btn")){categoryContainer.querySelector(".active")?.classList.remove("active");target.classList.add("active");activeCategory=target.dataset.category||"All";filterProducts()}});searchBar.addEventListener("input",filterProducts);
</script>

<style>
  /* Styles up to product-grid are unchanged */
  .filters{margin-bottom:2rem;display:flex;flex-direction:column;gap:1rem}
  #search-bar{width:100%;padding:.8rem 1.25rem;font-size:1rem;border-radius:12px;border:1px solid var(--border-color);background-color:var(--secondary-bg-color);color:var(--text-color)}
  .category-filters{display:flex;flex-wrap:wrap;gap:.75rem}
  .filter-btn{padding:.5rem 1rem;font-size:.9rem;font-weight:500;border:none;border-radius:8px;background-color:var(--secondary-bg-color);color:var(--text-color);cursor:pointer;transition:.2s}
  .filter-btn.active{background-color:var(--button-color);color:var(--button-text-color)}
  
  #product-grid {
    display: grid;
    gap: 1.5rem;
    grid-template-columns: repeat(2, 1fr);
    grid-auto-rows: 1fr;
  }
  @media(min-width: 640px){#product-grid{grid-template-columns:repeat(3,1fr);}}
  @media(min-width:1024px){#product-grid{grid-template-columns:repeat(5,1fr);}}
  
  .product-card {
    background-color: var(--secondary-bg-color);
    /* !!! UPDATED: More rounded corners !!! */
    border-radius: 20px;
    overflow: hidden;
    text-decoration: none;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    border: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
  }
  .product-card:hover { transform: translateY(-5px); box-shadow: 0 10px 20px rgba(0,0,0,0.07); }
  .dark .product-card:hover { box-shadow: 0 0 25px color-mix(in srgb, var(--link-color) 15%, transparent); }
  
  .card-image-container {
    width: 100%;
    aspect-ratio: 1.618 / 1;
    flex-shrink: 0;
    background-color: var(--secondary-bg-color);
    padding: 0.75rem;
  }
  .product-card img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    /* !!! UPDATED: More rounded corners to match the card !!! */
    border-radius: 12px;
  }
  
  .card-content {
    padding: 0 1rem 1rem 1rem; /* Adjust padding slightly */
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    /* This is needed for the truncation to work */
    overflow: hidden;
  }
  
  .card-category { font-size:.7rem; font-weight:600; color:var(--hint-color); text-transform:uppercase; }
  
  .card-title {
    font-size: 0.9rem;
    font-weight: 600;
    color:var(--text-color);
    margin: 0.25rem 0 0.5rem;
    line-height: 1.3;
  }

  /* !!! NEW: Styles for the dynamic description !!! */
  .card-description {
    font-size: 0.85rem;
    color: var(--hint-color);
    line-height: 1.4;
    margin: 0;
    flex-grow: 1; /* This makes the description take up the available space */
    
    /* The magic for multi-line truncation */
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3; /* You can adjust this number (e.g., 2, 3, 4) */
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .card-footer {
    display:flex;
    justify-content:space-between;
    align-items:center;
    margin-top: 0.75rem; /* Give it some space from the description */
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  .card-price{font-size:1rem;font-weight:700;color:var(--link-color)}
  .card-button{font-size:.8rem;font-weight:600;padding:.4rem .8rem;border:none;border-radius:8px;background-color:var(--button-color);color:var(--button-text-color)}
</style>