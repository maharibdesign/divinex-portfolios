---
import MainLayout from '../../layouts/MainLayout.astro';
import { TELEGRAM_CONTACT_LINK } from '../../lib/constants';
import { supabase } from '../../lib/supabase';
import type { Database } from '../../lib/database.types';

type Product = Database['public']['Tables']['products']['Row'];

const { id } = Astro.params;
let product: Product | null = null;
let fetchError: string | null = null;

if (!id || isNaN(Number(id))) {
  fetchError = "Invalid Product ID provided.";
} else {
  try {
    const { data, error } = await supabase
      .from('products')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      console.error('Supabase fetch error:', error.message);
      fetchError = `Product not found or database error: ${error.message}`;
    } else {
      product = data;
    }
  } catch (e) {
    console.error('Catch block error:', e);
    fetchError = 'A server error occurred while fetching the product.';
  }
}

if (!product) {
  return new Response(`Error: ${fetchError || 'Product could not be loaded.'}`, {
    status: 404
  });
}

// !!! FIXED: Added fallbacks for potentially null values !!!
const { title = 'Untitled Product', price = 0, images, category = 'Uncategorized', description = 'No description available.' } = product;
const imageArray = Array.isArray(images) ? images : (product.image ? [product.image] : []);
---
<MainLayout title={title}>
  <a href="/" class="back-link">‚Üê Back to Catalog</a>

  <div class="product-detail">
    <div class="product-images">
      {imageArray.length > 0 ? (
        imageArray.map(img => <img src={img} alt={title} loading="lazy" />)
      ) : (
        <div class="placeholder-image">No Image</div>
      )}
    </div>
    <div class="product-info">
      <p class="category">{category}</p>
      <h1>{title}</h1>
      <div class="price">${price.toFixed(2)}</div>
      <div class="description"><p>{description}</p></div>
      <a href={TELEGRAM_CONTACT_LINK} class="cta-button" target="_blank">Order on Telegram</a>
    </div>
  </div>
</MainLayout>
<style>
  .back-link { display: inline-block; margin-bottom: 2rem; font-weight: 500; color: var(--link-color); }
  .product-detail{display:grid;grid-template-columns:1fr;gap:2rem;}
  @media(min-width:768px){.product-detail{grid-template-columns:minmax(0,2fr) minmax(0,1fr);gap:3rem;}}
  .product-images img, .placeholder-image {
    width:100%; aspect-ratio:4/3; object-fit:cover; border-radius:16px; background-color:var(--secondary-bg-color);
  }
  .placeholder-image { display: grid; place-content: center; color: var(--hint-color); }
  .product-info{padding:1rem;}
  .category{font-weight:600;color:var(--hint-color);margin-bottom:.5rem;}
  h1{font-size:2.5rem;margin:0 0 .5rem;line-height:1.2;}
  .price{font-size:2rem;font-weight:700;color:var(--link-color);margin-bottom:1.5rem;}
  .description p{font-size:1.1rem;line-height:1.7;opacity:.9;}
  .cta-button{display:block;width:100%;padding:1rem;font-size:1.1rem;font-weight:600;text-align:center;color:var(--button-text-color);background-color:var(--button-color);border-radius:12px;margin-top:2rem;transition:transform .2s;}
  .cta-button:hover{transform:scale(1.03);}
</style>